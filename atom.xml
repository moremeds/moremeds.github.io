<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Chenxi LI]]></title>
  <subtitle><![CDATA[Hack of tech]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://moremeds.github.io/"/>
  <updated>2016-01-30T23:52:50.000Z</updated>
  <id>http://moremeds.github.io/</id>
  
  <author>
    <name><![CDATA[Chenxi Li]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[JVM Basic Structure]]></title>
    <link href="http://moremeds.github.io/blog/JVM-Basic-Struture/"/>
    <id>http://moremeds.github.io/blog/JVM-Basic-Struture/</id>
    <published>2016-01-19T21:44:04.000Z</published>
    <updated>2016-01-30T23:52:50.000Z</updated>
    <content type="html"><![CDATA[<p>It’s been a long time before I want to summary the structural basics within the JVM. The graph below shows the relationship among those components, which can be cataloged into two sections, ones are private to individual thread, and ones are independent to threads.</p>
<p><img src="/images/JVM_Internal_Architecture_small.png" alt=""></p>
<a id="more"></a>
<h1 id="Per_Thread"><a href="#Per_Thread" class="headerlink" title="Per Thread"></a>Per Thread</h1><p>A thread is a thread of execution in a program. The JVM allows an application to have multiple threads of execution running concurrently.</p>
<h2 id="System_Threads"><a href="#System_Threads" class="headerlink" title="System Threads"></a>System Threads</h2><p>JVM System threads run along with the main thread in the background, created by invoking <code>public static void main(String[])</code>. The main background system threads in the Hotspot JVM are:</p>
<ul>
<li><strong>VM Thread</strong>: waits for operations that require the JVM to reach a safe point such as: stop-world-gc, thread stack dumps.</li>
<li><strong>Periodic Task Thread</strong>: is responsible for timer related events.</li>
<li><strong>GC Thread</strong>: takes care of different garbage collection activities.</li>
<li><strong>Compiler Thread</strong>: compiles byte code to native code at runtime.</li>
<li><strong>Signal Dispatcher</strong>: receives signals sent to the JVM process and handle them inside the JVM by calling the appropriate JVM methods.</li>
</ul>
<h2 id="Thread_of_Execution"><a href="#Thread_of_Execution" class="headerlink" title="Thread of Execution"></a>Thread of Execution</h2><p>Each thread of execution has the following components.</p>
<ul>
<li><strong>Program Counter(PC)</strong>: keeps track of where JVM is executing instruction. PC will in fact be pointing at a memory address in <em>Method Area</em>.</li>
<li><strong>Stack</strong>: each thread has its own stack that holds frames for each method executing on the thread.</li>
<li><strong>Native Stack</strong>: not all JVM supports native stack.</li>
<li><strong>Stack Restriction</strong>: if a thread requires a larger stack than allowed, <code>StackOverflowError</code> will be thrown. If a thread requires a new frame and no memory to allocate, <code>OutOfMemoryError</code> will be thrown. Meanwhile, the size of the stack can be configurable, either dynamic or static.</li>
</ul>
<h2 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h2><p>Frame is created when method is invoked, and be pushed to the top of stack. It will be popped when the methods returns normally or there is an uncaught exception. In each frame, it contains:</p>
<ul>
<li><strong>Local Variable Array</strong>: contains all the variables used during the execution of the method. Reference to <code>this</code>, input parameters, and other local variables are included.</li>
<li><strong>Operand Stack</strong>: is used during the execution of byte code instructions like the general-purpose registers used in CPU.</li>
<li><strong>Dynamic Linking</strong>: Each frame contains a reference to the runtime constant pool, which references to the class of this method being executed for that frame.</li>
</ul>
<h1 id="Common_Components"><a href="#Common_Components" class="headerlink" title="Common Components"></a>Common Components</h1><p>To facilitate the memory management, shared area can be heap or non-heap, which are divided into three sections: <strong>Young Generation</strong>(eden and survivor), <strong>Old Generation</strong>(tenured generation), and <strong>Permanent Generation</strong>(no longer in Java 8).</p>
<h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><p>Heap is used to allocate class instances and arrays at runtime. Unlike the primitive variables and references in the local variable array, objects are always stored on the heap so they are not removed when a method ends. Instead objects can only be removed by the garbage collector.</p>
<h2 id="Non-Heap"><a href="#Non-Heap" class="headerlink" title="Non-Heap"></a>Non-Heap</h2><p>Objects that are logically considered as part of the JVM mechanics are not created on the heap. Non-Heap memory includes:</p>
<ul>
<li>Permanent Generation: the <em>method area</em> and <em>interned strings</em></li>
<li>Code Cache: used for compilation and storage of methods that have been comiled to native code by the JIT compiler.</li>
</ul>
<h2 id="Method_Area"><a href="#Method_Area" class="headerlink" title="Method Area"></a>Method Area</h2><p>All threads share the same method area, so access to the method area data and the process of dynamic linking must be thread safe. Method area stores per-class information such as:</p>
<ul>
<li>Classloader Reference</li>
<li>Run time constant pool</li>
<li>Field data</li>
<li>Method data</li>
<li>Method code</li>
</ul>
<h2 id="Memory_Management"><a href="#Memory_Management" class="headerlink" title="Memory Management"></a>Memory Management</h2><ol>
<li>New objects created into the young generation</li>
<li>Minor garbage collection in young generation. Alive objects will be moved from eden space to the survivor spaces (more detailed space can be specified).</li>
<li>Major garbage collection causes the application threads to pause. Alive objects will be moved across generations, young to old.</li>
<li>Permanent generation is collected every time the old generation is collected. They are both collected when either is full.</li>
<li>PermGen is replaced with Metaspace which is very similar in Java 8. Main difference is that Metaspace re-sizes dynamically i.e., It can expand at runtime. Java Metaspace space: unbounded (default)</li>
</ol>
<h2 id="Just_in_Time__28JIT_29_Compilation"><a href="#Just_in_Time__28JIT_29_Compilation" class="headerlink" title="Just in Time (JIT) Compilation"></a>Just in Time (JIT) Compilation</h2><p>Just-in-time (JIT) compiler is a program that turns Java bytecode (a program that contains instructions that must be interpreted) into instructions that can be sent directly to the processor.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>It’s been a long time before I want to summary the structural basics within the JVM. The graph below shows the relationship among those components, which can be cataloged into two sections, ones are private to individual thread, and ones are independent to threads.</p>
<p><img src="/images/JVM_Internal_Architecture_small.png" alt=""></p>]]>
    
    </summary>
    
      <category term="java" scheme="http://moremeds.github.io/tags/java/"/>
    
      <category term="jvm" scheme="http://moremeds.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Querying and Templating on Grafana with InfluxDB]]></title>
    <link href="http://moremeds.github.io/blog/Querying-and-Templating-on-Grafana-with-InfluxDB/"/>
    <id>http://moremeds.github.io/blog/Querying-and-Templating-on-Grafana-with-InfluxDB/</id>
    <published>2016-01-14T23:23:01.000Z</published>
    <updated>2016-01-17T21:53:38.000Z</updated>
    <content type="html"><![CDATA[<p>Using InfluxDB on Grafana is not quite common comparing to Graphite, another data source engine. Different data sources require different settings. The configuration process includes locating the measurements, finding the correct stats info, and filtering the result with refined condition.</p>
 <a id="more"></a>
<h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p>The snapshot blow shows a configured graph with query, template variables, and alias patterns.</p>
<p><strong>Editor tag filters</strong><br>To add a tag filter click the plus icon to the right of the <code>WHERE</code> condition. You can remove tag filters by clicking on the tag key and select <code>--remove tag filter--</code>.</p>
<p><strong>Regex matching</strong><br>You can type in regex patterns for metric names or tag filter values, be sure to wrap the regex pattern in forward slashes <code>(/)</code>. Grafana will automatically adjust the filter tag condition to use the InfluxDB regex match condition operator <code>(=~)</code>.</p>
<p><strong>Editor group by</strong><br>To group by a tag click the plus icon after the <code>GROUP BY ($interval)</code> text. Pick a tag from the dropdown that appears. You can remove the group by by clicking on the tag and then select <code>--remove group by--</code> from the dropdown.</p>
<p>Alias patterns</p>
<ul>
<li><code>$m</code> = replaced with measurement name</li>
<li><code>$measurement</code> = replaced with measurement name</li>
<li><code>$col</code> = replaced with column name</li>
<li><code>$tag_hostname</code> = replaced with the value of the hostname tag</li>
<li>You can also use <code>[[tag_hostname]]</code> pattern replacement syntax</li>
</ul>
<h2 id="Variable_Templates"><a href="#Variable_Templates" class="headerlink" title="Variable Templates"></a>Variable Templates</h2><p>Below is the snapshot on the page to configure the variable template</p>
<p><img src="/images/grafana/template.png" alt=""></p>
<p>You can create a template variable in Grafana and have that variable filled with values from any InfluxDB metric exploration query. You can then use this variable in your InfluxDB metric queries. For example you can have a variable that contains all values for tag topologyName if you specify a query like this in the templating edit view.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.&#9;SHOW TAG VALUES WITH KEY = &#34;topologyName&#34;</span><br></pre></td></tr></table></figure>
<p>You can also create nested variables. For example if you had another variable, for example env. Then you could have the hosts variable only show hosts from the current selected region with a query like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.&#9;SHOW TAG VALUES WITH KEY = &#34;hostname&#34;  WHERE env =~ /$env/</span><br></pre></td></tr></table></figure>
<p>Additionally, the order of each variable template matters. You may refer to a former variable’s query results in a latter defined variable.</p>
<h2 id="Little_Tips"><a href="#Little_Tips" class="headerlink" title="Little Tips"></a>Little Tips</h2><p>Basically, query and template variable are very easy to edit as long as you know what and where to find your data. Here is a few tipping points I summarized when I configured my Grafana.</p>
<ol>
<li>Try to use tag to generate the expressive name for measurement/table, this will make your life easier when you create template variable and form your own query</li>
<li>When you want to select the multiple value in template variable, make sure you check All value tab and choose regex value for both <em><strong>multi format</strong></em> and <strong><em>all format</em></strong></li>
<li>In the retention policy from InfluxDB, you configure the frequency you perform a housekeeping procedure to clean up out-dated data.</li>
<li>For timer measurements, you will find a lot sub-metrics such as <strong>mean, last, max, or min</strong>. They are calculated by StatsD from a whole data set received in one flushing period. Ensure select the correct one when you query your graph.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>Using InfluxDB on Grafana is not quite common comparing to Graphite, another data source engine. Different data sources require different settings. The configuration process includes locating the measurements, finding the correct stats info, and filtering the result with refined condition.</p>]]>
    
    </summary>
    
      <category term="grafana" scheme="http://moremeds.github.io/tags/grafana/"/>
    
      <category term="influxdb" scheme="http://moremeds.github.io/tags/influxdb/"/>
    
      <category term="tutorial" scheme="http://moremeds.github.io/tags/tutorial/"/>
    
      <category term="tutorial" scheme="http://moremeds.github.io/categories/tutorial/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Grafana Stack with InfluxDB]]></title>
    <link href="http://moremeds.github.io/blog/Grafana-Stack-with-InfluxDB/"/>
    <id>http://moremeds.github.io/blog/Grafana-Stack-with-InfluxDB/</id>
    <published>2016-01-03T19:22:37.000Z</published>
    <updated>2016-01-30T20:58:09.000Z</updated>
    <content type="html"><![CDATA[<p>Collecting and analyzing metrics are the key to understand a system’s runtime behaviors and thus to provide a better guideline of optimization. As the user of a metrics system, you might want to collect metric and event with simple APIs, retrieve historical metric data, and view visualized metrics statistics.</p>
<p>This article shows you how to build a metric system with <a href="https://github.com/etsy/statsd" target="_blank" rel="external">StatsD</a>, <a href="https://influxdata.com/" target="_blank" rel="external">influxdb</a>, and <a href="http://grafana.org/" target="_blank" rel="external">Grafana</a>, as an example metrics system that composes of a client, a data storage, and visualization UI. There are many available open source packages.</p>
<p><img src="/images/grafana/LogicFlow.png" width="60%" height="60%"></p>
<a id="more"></a>
<p>The figure above shows you the data flow. User configures the application, and sends metrics to StatsD server. StatsD stores the metrics data in InfluxDB, a time-series database, where Grafana retrieves data and displays the visualized metrics.</p>
<p>Let’s briefly discuss the software collection before moving on to configuration.</p>
<ul>
<li>StatsD is a daemon that collects and aggregates metrics data. With the well-accepted UDP protocol, <a href="https://github.com/etsy/statsd/wiki" target="_blank" rel="external">clients library</a> for almost all major programming language. In the meantime, StatsD can also serves as a local aggregator, providing a extensible backend architecture.</li>
<li><a href="http://docs.grafana.org/installation/rpm/" target="_blank" rel="external">Grafana</a> is a metrics dashboard that provides data visualization and generates statistic graph. You can choose the most suitable approach to install. Configuration file can be found <a href="http://docs.grafana.org/installation/configuration/" target="_blank" rel="external">here</a>.</li>
<li><a href="https://docs.influxdata.com/influxdb/v0.9/introduction/overview/" target="_blank" rel="external">InfluxDB</a> is a time-series database for storing the metrics data.</li>
</ul>
<h2 id="StatsD"><a href="#StatsD" class="headerlink" title="StatsD"></a>StatsD</h2><p>When the StatsD is placed in a suitable location, please edit <code>config.js</code> to configure StatsD to send data to InfluxDB. Possible example is as below:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.&#123;</span><br><span class="line">2.    influxdb: &#123;</span><br><span class="line">3.        host: '127.0.0.1', // InfluxDB host. (default 127.0.0.1)</span><br><span class="line">4.        port: 8086, // InfluxDB port. (default 8086)</span><br><span class="line">5.        database: 'demo',  // InfluxDB database instance. (required)</span><br><span class="line">6.        username: 'root', // InfluxDB database username. (required)</span><br><span class="line">7.        password: 'root', // InfluxDB database password. (required)</span><br><span class="line">8.        flush: &#123;</span><br><span class="line">9.            enable: true // Enable regular flush strategy. (default true)</span><br><span class="line">10.        &#125;,</span><br><span class="line">11.        proxy: &#123;</span><br><span class="line">12.            enable: false, // Enable the proxy strategy. (default false)</span><br><span class="line">13.            suffix: 'raw', // Metric name suffix. (default 'raw')</span><br><span class="line">14.            flushInterval: 1000 // Flush interval for the internal buffer.</span><br><span class="line">15.                // (default 1000)</span><br><span class="line">16.        &#125;</span><br><span class="line">17.    &#125;,</span><br><span class="line">18.    port: 8125, // StatsD port.</span><br><span class="line">19.    backends: ['./backends/console’, 'statsd-influxdb-backend'],</span><br><span class="line">20.    debug: true,</span><br><span class="line">21.    legacyNamespace: false,</span><br><span class="line">22.    keyNameSanitize: false</span><br><span class="line">23.&#125;</span><br></pre></td></tr></table></figure>
<p>Please note that the key word <strong>backends</strong>, which specifies the destination of the metrics data, and the dependency could be installed as below:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.$ <span class="built_in">cd</span> statd</span><br><span class="line"><span class="number">2</span>.</span><br><span class="line"><span class="number">3</span>.$ npm install statsd-influxdb-backend <span class="operator">-d</span></span><br><span class="line"><span class="number">4</span>.</span><br><span class="line"><span class="number">5</span>.$ npm install</span><br></pre></td></tr></table></figure>
<p><code>flushInterval</code> is set to send batch of information to InfluxDB every 10s by default. <code>keyNameSanitize</code>, please set it to <code>false</code> when you are connecting InfluxDB or have some special characters in the name tags.</p>
<h2 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h2><p>Configuration for Grafana mainly contains two sections, one is for <code>Data Sources</code>, and another is for templating/query. I will focus on configure the data source in the article.</p>
<p>Since the DataSource can only be configured after organisation is created, it would be better to sign-up as root and create a default organisation. Then change the anonymous auth settings with your newly-created org. This will allow users without login view the stats information, but they won’t be able to modify the charts’.</p>
<p>If you created the root user (you may call it whatever you like), and login with the detail, you will find the DataSource section looks like this snapshot:</p>
<p><img src="/images/grafana/dataSource.png" alt=""></p>
<p>Select InfluxDB 0.9 as the latest (or whatever your influxDB version is), and then enter details you set for your InfluxDB instance. In the dashboard you may create a new graph point to your new data source.</p>
<h2 id="InfluxDB"><a href="#InfluxDB" class="headerlink" title="InfluxDB"></a>InfluxDB</h2><p>Once database service is started, the default port for Admin Web UI is <code>8083</code>, and DataSource Port is <code>8086</code>.</p>
<p>In the admin UI, the dropdown menu shows some template query for basic operation. As mentioned before influxDB offers a <a href="https://docs.influxdata.com/influxdb/v0.9/concepts/crosswalk/" target="_blank" rel="external">SQL-like query style</a>. Simply put, <code>MEASUREMENTS</code> is equivalent to <code>TABLE</code>, <code>TAGS</code> is equivalent to <code>COLUMNS</code>, and <code>POINTS</code> is equivalent to <code>ROW</code>. The above link shows a comprehensive induction on how to query InfluxDB.</p>
<p>This <a href="https://docs.influxdata.com/influxdb/v0.9/tools/shell/" target="_blank" rel="external">link</a> shows how to connect to InfluxDB with command-line, if you prefer a geeky way. To find a full document on how InfluxDB works in detail, please click here (Google Search always points to older version).</p>
<p>Once influxDB is installed, it would fairly easy to use. No much settings required.</p>
<p><img src="/images/grafana/influxdbSetting.png" alt=""></p>
<p>The <code>localhost</code> is the server where you installed the influxDB, and <code>8086</code> is the default port for querying data.</p>
<p><strong>Please leave a comment if you have any questions or correct me if there is an update on the new change for these applications.</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Collecting and analyzing metrics are the key to understand a system’s runtime behaviors and thus to provide a better guideline of optimization. As the user of a metrics system, you might want to collect metric and event with simple APIs, retrieve historical metric data, and view visualized metrics statistics.</p>
<p>This article shows you how to build a metric system with <a href="https://github.com/etsy/statsd">StatsD</a>, <a href="https://influxdata.com/">influxdb</a>, and <a href="http://grafana.org/">Grafana</a>, as an example metrics system that composes of a client, a data storage, and visualization UI. There are many available open source packages.</p>
<p><img src="/images/grafana/LogicFlow.png" width="60%" height="60%"></p>]]>
    
    </summary>
    
      <category term="grafana" scheme="http://moremeds.github.io/tags/grafana/"/>
    
      <category term="influxdb" scheme="http://moremeds.github.io/tags/influxdb/"/>
    
      <category term="statsd" scheme="http://moremeds.github.io/tags/statsd/"/>
    
      <category term="tutorial" scheme="http://moremeds.github.io/categories/tutorial/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://moremeds.github.io/blog/hello-world/"/>
    <id>http://moremeds.github.io/blog/hello-world/</id>
    <published>2016-01-03T19:18:21.000Z</published>
    <updated>2016-01-03T19:18:21.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> and my blog!</p>
<p>This is my very first post. As part of my new year resolution, I would want to keep a track of my development on the upcoming year.</p>
<p>Please check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. I will also keep updating on the following along with configuring this blog.</p>
<p>A special thanks to the theme provider: <a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="external">Apollo</a>.</p>
<a id="more"></a>
<h2 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h2 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server or $ hexo s</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h2 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate or $ hexo g</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h2 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy or hexo d</span><br></pre></td></tr></table></figure>
<p>Also you can combine the command together as below:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a> and my blog!</p>
<p>This is my very first post. As part of my new year resolution, I would want to keep a track of my development on the upcoming year.</p>
<p>Please check <a href="https://hexo.io/docs/">documentation</a> for more info. I will also keep updating on the following along with configuring this blog.</p>
<p>A special thanks to the theme provider: <a href="https://github.com/pinggod/hexo-theme-apollo">Apollo</a>.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://moremeds.github.io/tags/hexo/"/>
    
      <category term="intro" scheme="http://moremeds.github.io/tags/intro/"/>
    
      <category term="tutorial" scheme="http://moremeds.github.io/categories/tutorial/"/>
    
  </entry>
  
</feed>
